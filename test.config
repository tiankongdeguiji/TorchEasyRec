train_input_path: "/mnt/data/LLM4Rec/data/train_merged.parquet"
eval_input_path: "/mnt/data/LLM4Rec/data/test_merged.parquet"
model_dir: "/mnt/data/TorchEasyRec/experiments/xingqudaotest"
train_config {
    sparse_optimizer {
        adam_optimizer {
            lr: 3e-6
        }
        constant_learning_rate {
        }
    }
    dense_optimizer {
        adam_optimizer {
            lr: 3e-6
        }
        constant_learning_rate {
        }
    }
    num_epochs: 8
    tensorboard_summaries: ['loss', 'learning_rate', 'parameter', 'global_gradient_norm', 'gradient_norm', 'gradient']
}
eval_config {
}
data_config {
    batch_size: 16
    dataset_type: ParquetDataset
    fg_mode: FG_NORMAL
    label_fields: "clk"
    num_workers: 8
    negative_sampler {
        input_path: "/mnt/data/LLM4Rec/data/item_gl"
        num_sample: 15
        attr_fields: "item_id"
        attr_fields: "item_type"
        attr_fields: "status"
        attr_fields: "category"
        attr_fields: "author"
        attr_fields: "author_status"
        attr_fields: "title"
        attr_fields: "praise_count"
        attr_fields: "comment_count"
        attr_fields: "collect_count"
        attr_fields: "share_count"
        attr_fields: "theme_id"
        attr_fields: "home_mark"
        attr_fields: "club_mark"
        attr_fields: "publish_source"
        attr_fields: "activity_id"
        attr_fields: "pub_time"
        item_id_field: "item_id"
        attr_delimiter: "\x02"
    }
}
feature_configs: {
    prompt_feature {
        feature_name: "user_prompt"
        expression: [
            "user:user_id",
            "user:city",
            "user:gender",
            "user:week_day",
            "user:day_h",
            "user:is_new_user",
            "user:growth_level",
            "user:buy_camp_cnt",
            "user:item_cnt",
            "user:follow_cnt",
            "user:follower_cnt",
            "user:favorite_cnt",
            "user:category_name_list",
            "user:click_50_seq__category",
            "user:click_50_seq__item_title"
        ]
        prompt_type: "user"
        tokenizer: "Qwen3-0.6B"
    }
}
feature_configs: {
    prompt_feature {
        feature_name: "item_prompt"
        expression: [
            "item:item_id",
            "item:category",
            "item:item_type",
            "item:status",
            "item:title",
            "item:author_status",
            "item:pub_time",
            "item:praise_count",
            "item:comment_count",
            "item:collect_count",
            "item:share_count",
            "item:publish_source",
            "item:home_mark",
            "item:club_mark"
        ]
        prompt_type: "item"
        tokenizer: "Qwen3-0.6B"
    }
}
model_config {
    feature_groups {
        group_name: "user"
        feature_names: "user_prompt"
        group_type: DEEP
    }
    feature_groups {
        group_name: "item"
        feature_names: "item_prompt"
        group_type: DEEP
    }
    dsllm {
        user_tower {
            input: 'user'
            mlp {
                hidden_units: 256
                hidden_units: 128
                hidden_units: 64
                use_bn: true
            }
        }
        item_tower {
            input: 'item'
            mlp {
                hidden_units: 256
                hidden_units: 128
                hidden_units: 64
                use_bn: true
            }
        }
        output_dim: 32
    }
    metrics {
        recall_at_k {
            top_k: 1
        }
    }
    metrics {
        recall_at_k {
            top_k: 5
        }
    }
    losses {
        softmax_cross_entropy {
        }
    }
}
